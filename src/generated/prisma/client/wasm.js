
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DirectoryFieldConstraintScalarFieldEnum = {
  id: 'id',
  field_id: 'field_id'
};

exports.Prisma.IntegerFieldConstraintScalarFieldEnum = {
  id: 'id',
  min_value: 'min_value',
  max_value: 'max_value',
  default_value: 'default_value',
  constraint_id: 'constraint_id'
};

exports.Prisma.StringFieldContraintScalarFieldEnum = {
  id: 'id',
  min_length: 'min_length',
  max_length: 'max_length',
  default_value: 'default_value',
  constraint_id: 'constraint_id'
};

exports.Prisma.DateFieldContraintScalarFieldEnum = {
  id: 'id',
  min_value: 'min_value',
  max_value: 'max_value',
  default_value: 'default_value',
  constraint_id: 'constraint_id'
};

exports.Prisma.DateTimeFieldContraintScalarFieldEnum = {
  id: 'id',
  min_value: 'min_value',
  max_value: 'max_value',
  default_value: 'default_value',
  constraint_id: 'constraint_id'
};

exports.Prisma.TimeFieldContraintScalarFieldEnum = {
  id: 'id',
  min_value: 'min_value',
  max_value: 'max_value',
  default_value: 'default_value',
  constraint_id: 'constraint_id'
};

exports.Prisma.PointFieldContraintScalarFieldEnum = {
  id: 'id',
  constraint_id: 'constraint_id'
};

exports.Prisma.LineStringFieldContraintScalarFieldEnum = {
  id: 'id',
  constraint_id: 'constraint_id'
};

exports.Prisma.PolygonFieldContraintScalarFieldEnum = {
  id: 'id',
  constraint_id: 'constraint_id'
};

exports.Prisma.DirectoryFieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  type: 'type',
  required: 'required',
  order: 'order',
  show_in_list: 'show_in_list',
  directory_id: 'directory_id'
};

exports.Prisma.DirectoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.ElementsScalarFieldEnum = {
  id: 'id',
  data: 'data',
  is_valid: 'is_valid',
  directory_id: 'directory_id'
};

exports.Prisma.LayerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  active: 'active',
  directory_id: 'directory_id',
  field_id: 'field_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.DirectoryFieldType = exports.$Enums.DirectoryFieldType = {
  integer: 'integer',
  string: 'string',
  date: 'date',
  datetime: 'datetime',
  time: 'time',
  point: 'point',
  linestring: 'linestring',
  polygon: 'polygon'
};

exports.Prisma.ModelName = {
  DirectoryFieldConstraint: 'DirectoryFieldConstraint',
  IntegerFieldConstraint: 'IntegerFieldConstraint',
  StringFieldContraint: 'StringFieldContraint',
  DateFieldContraint: 'DateFieldContraint',
  DateTimeFieldContraint: 'DateTimeFieldContraint',
  TimeFieldContraint: 'TimeFieldContraint',
  PointFieldContraint: 'PointFieldContraint',
  LineStringFieldContraint: 'LineStringFieldContraint',
  PolygonFieldContraint: 'PolygonFieldContraint',
  DirectoryField: 'DirectoryField',
  Directory: 'Directory',
  Elements: 'Elements',
  Layer: 'Layer'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
